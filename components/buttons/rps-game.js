const { Client, Interaction, EmbedBuilder } = require('discord.js');
const economyProfile = require('../../config/economyProfile');
const { rpsGame } = require('../../functions/common/games');

module.exports = {
  type: 'buttons',
  data: { name: 'rps-game' },
  /** - RPS Game
   * @param {Interaction} interaction - Button Interaction
   * @param {Client} client - Discord Client */
  async execute(interaction, client) {
    const { user, guildId, customId } = interaction;
    const { errorEmbed } = client;
    const [, button, betStr] = customId.split(':');
    const userMove = parseInt(button, 10);
    const bet = parseInt(betStr, 10);

    const profile = await economyProfile.findOne({ guildId, userId: user.id }).catch(console.error);
    // Ki·ªÉm tra t√†i kho·∫£n Economy
    if (!profile) return await interaction.update(errorEmbed({ desc: 'B·∫°n ch∆∞a c√≥ t√†i kho·∫£n Economy!' }));

    // Reset count n·∫øu sang ng√†y m·ªõi
    const today = new Date();
    const lastPlay = profile?.lastPlayRPS ? new Date(profile?.lastPlayRPS) : null;
    const isNewDay = !lastPlay || today.toDateString() !== lastPlay.toDateString();

    if (isNewDay) {
      profile.rpsCount = 0;
      profile.lastPlayRPS = today;
    }

    // Ki·ªÉm tra s·ªë l·∫ßn ch∆°i trong ng√†y
    if (profile?.rpsCount >= 50)
      return await interaction.update(errorEmbed({ desc: 'B·∫°n ƒë√£ ch∆°i h·∫øt 50 l·∫ßn trong ng√†y!' }));

    // Ki·ªÉm tra ti·ªÅn c∆∞·ª£c
    if (profile?.balance < bet)
      return await interaction.update(
        errorEmbed({ desc: `B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ c∆∞·ª£c! S·ªë d∆∞: ${profile?.balance.toCurrency()}` })
      );

    // T√≠nh k·∫øt qu·∫£
    const rps = rpsGame(userMove, profile, bet);
    let resultMessage = '';
    let winAmount = 0;

    switch (rps.res) {
      case 0: // Thua
        profile.balance -= bet;
        profile.totalSpent += bet;
        resultMessage = `B·∫°n thua v√† b·ªã tr·ª´ **${bet.toCurrency()}**!`;
        break;
      case 1: // H√≤a
        resultMessage = 'H√≤a, b·∫°n kh√¥ng b·ªã tr·ª´ ti·ªÅn!';
        break;
      case 2: // Th·∫Øng
        winAmount = Math.floor(bet * (1 + Math.random() * 0.5)); // 1x ~ 1.5x
        profile.balance += winAmount;
        profile.totalEarned += winAmount;
        resultMessage = `B·∫°n th·∫Øng v√† nh·∫≠n ƒë∆∞·ª£c **${winAmount.toCurrency()}**!`;
        break;
    }

    // TƒÉng s·ªë l·∫ßn ch∆°i v√† c·∫≠p nh·∫≠t
    profile.rpsCount += 1;
    profile.lastPlayRPS = today;
    await profile.save().catch(console.error);

    // Tr·∫£ v·ªÅ k·∫øt qu·∫£
    const embeds = [
      new EmbedBuilder()
        .setColor(rps.color)
        .setThumbnail(user.displayAvatarURL(true))
        .setAuthor({ name: `Hi, ${user.displayName || user.username}`, iconURL: user.displayAvatarURL(true) })
        .setTitle('You ' + rps.result)
        .setDescription(
          `${rps.description}\n\n${resultMessage}\nS·ªë l·∫ßn ch∆°i h√¥m nay: **${
            profile?.rpsCount
          }/50**\nS·ªë d∆∞: **${profile?.balance.toCurrency()}**`
        )
        .setTimestamp()
        .setFields(
          { name: '\\üí∞ T·ªïng ti·ªÅn ƒë√£ nh·∫≠n', value: (profile?.totalEarned || 0).toCurrency(), inline: true },
          { name: '\\üí∏ T·ªïng ti·ªÅn ƒë√£ chi', value: (profile?.totalSpent || 0).toCurrency(), inline: true }
        ),
    ];

    return await interaction.update({ embeds });
  },
};
