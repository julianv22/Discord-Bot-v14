const { Client, ChatInputCommandInteraction, EmbedBuilder, Colors } = require('discord.js');
const economyProfile = require('../../config/economyProfile');

module.exports = {
  type: 'buttons',
  data: { name: 'transfer-btn' },
  /** - Transfer Money Button
   * @param {ChatInputCommandInteraction} interaction - Command Interaction
   * @param {Client} client - Discord Client */
  async execute(interaction, client) {
    const { user, guild, customId } = interaction;
    const { errorEmbed, catchError } = client;
    // T√°ch customId l·∫•y amount, fee, targetId
    const [, amountStr, feeStr, targetId] = customId.split(':');

    if (amountStr === 'cancel') return interaction.update({ content: '\\‚ùå Hu·ª∑ giao d·ªãch!', components: [] });

    const [amount, fee] = [parseInt(amountStr, 10), parseInt(feeStr, 10)];
    const total = amount + fee;

    try {
      // L·∫•y profile c·ªßa ng∆∞·ªùi chuy·ªÉn v√† ng∆∞·ªùi nh·∫≠n
      let [profile, targetProfile] = await Promise.all([
        await economyProfile.findOne({ guildID: guild.id, userID: user.id }).catch(console.error),
        await economyProfile.findOne({ guildID: guild.id, userID: targetId }).catch(console.error),
      ]);

      // Ki·ªÉm tra l·∫°i d·ªØ li·ªáu
      if (!profile)
        return await interaction.update(errorEmbed({ desc: 'Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c v·ªõi database', emoji: false }));
      if (!targetProfile)
        targetProfile = await economyProfile
          .create({
            guildID: guild.id,
            guildName: guild.name,
            userID: targetId,
            bank: 0,
          })
          .catch(console.error);
      if (amount > profile.bank)
        return await interaction.update(errorEmbed({ desc: 'B·∫°n kh√¥ng c√≥ ƒë·ªß \\üí≤ ƒë·ªÉ chuy·ªÉn', emoji: false }));

      // Tr·ª´ ti·ªÅn ng∆∞·ªùi chuy·ªÉn, c·ªông ti·ªÅn ng∆∞·ªùi nh·∫≠n
      profile.bank -= total;
      targetProfile.bank += amount;

      await profile.save().catch(console.error);
      await targetProfile.save().catch(console.error);

      // T·∫°o embed th√¥ng b√°o cho ng∆∞·ªùi chuy·ªÉn
      const embedSender = new EmbedBuilder()
        .setAuthor({ name: guild.name, iconURL: guild.iconURL(true) })
        .setTitle('\\‚úÖ Chuy·ªÉn ti·ªÅn th√†nh c√¥ng!')
        .setDescription(
          `\\‚ôªÔ∏è B·∫°n ƒë√£ chuy·ªÉn **${amount.toLocaleString('vi-VN', {
            style: 'currency',
            currency: 'VND',
          })}** cho <@${targetId}>.\n\n\\üíµ Ph√≠ giao d·ªãch: **${fee.toLocaleString('vi-VN', {
            style: 'currency',
            currency: 'VND',
          })}**\n\n\\üí∏ T·ªïng tr·ª´: **${total.toLocaleString('vi-VN', {
            style: 'currency',
            currency: 'VND',
          })}**\n\n\\üè¶ S·ªë d∆∞ c√≤n l·∫°i: **${profile.bank.toLocaleString('vi-VN', {
            style: 'currency',
            currency: 'VND',
          })}**`,
        )
        .setColor(Colors.Green)
        .setThumbnail(cfg.economyPNG)
        .setTimestamp()
        .setFooter({ text: `Requested by ${user.displayName || user.username}`, iconURL: user.displayAvatarURL(true) });

      // T·∫°o embed th√¥ng b√°o cho ng∆∞·ªùi nh·∫≠n
      const embedReceiver = new EmbedBuilder()
        .setAuthor({ name: guild.name, iconURL: guild.iconURL(true) })
        .setTitle('B·∫°n v·ª´a nh·∫≠n ƒë∆∞·ª£c ti·ªÅn!')
        .setDescription(
          `B·∫°n v·ª´a nh·∫≠n ƒë∆∞·ª£c **${amount.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}** t·ª´ <@${
            user.id
          }> trong guild ${guild.name}.\n\n\\üè¶ S·ªë d∆∞ m·ªõi: **${targetProfile.bank.toLocaleString('vi-VN', {
            style: 'currency',
            currency: 'VND',
          })}**`,
        )
        .setColor(Colors.DarkGold)
        .setThumbnail(cfg.economyPNG)
        .setTimestamp()
        .setFooter({
          text: client.user.displayName || client.user.username,
          iconURL: client.user.displayAvatarURL(true),
        });

      // G·ª≠i th√¥ng b√°o cho ng∆∞·ªùi nh·∫≠n (n·∫øu c√≥ th·ªÉ)
      const member = await guild.members.fetch(targetId);
      await member.send({ embeds: [embedReceiver] }).catch(console.error);

      // C·∫≠p nh·∫≠t l·∫°i interaction cho ng∆∞·ªùi chuy·ªÉn
      return await interaction.update({ embeds: [embedSender], components: [] });
    } catch (e) {
      return await catchError(interaction, e, this);
    }
  },
};
