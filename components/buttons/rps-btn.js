const { Client, ChatInputCommandInteraction, EmbedBuilder } = require('discord.js');
const economyProfile = require('../../config/economyProfile');
const { rpsGame } = require('../../functions/common/games');
const { toCurrency } = require('../../functions/common/utilities');

module.exports = {
  type: 'buttons',
  data: { name: 'rps-btn' },
  /** - RPS Game
   * @param {ChatInputCommandInteraction} interaction - Command Interaction
   * @param {Client} client - Discord Client */
  async execute(interaction, client) {
    const { user, guild, customId } = interaction;
    const { errorEmbed } = client;
    const [, button, betStr] = customId.split(':');
    const userMove = parseInt(button, 10);
    const bet = parseInt(betStr, 10);

    let profile = await economyProfile.findOne({ guildID: guild.id, userID: user.id }).catch(console.error);
    // Ki·ªÉm tra t√†i kho·∫£n Economy
    if (!profile) return await interaction.update(errorEmbed({ desc: 'B·∫°n ch∆∞a c√≥ t√†i kho·∫£n Economy!' }));
    // Reset count n·∫øu sang ng√†y m·ªõi
    const today = new Date();
    const lastPlay = profile.lastPlayRPS ? new Date(profile.lastPlayRPS) : null;
    const isNewDay = !lastPlay || today.toDateString() !== lastPlay.toDateString();

    if (isNewDay) {
      profile.rpsCount = 0;
      profile.lastPlayRPS = today;
    }
    // Ki·ªÉm tra s·ªë l·∫ßn ch∆°i trong ng√†y
    if (profile.rpsCount >= 50)
      return await interaction.update(errorEmbed({ desc: 'B·∫°n ƒë√£ ch∆°i h·∫øt 50 l·∫ßn trong ng√†y!' }));
    // Ki·ªÉm tra ti·ªÅn c∆∞·ª£c
    if (profile.balance < bet) {
      return await interaction.update(
        errorEmbed({
          desc: `B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ c∆∞·ª£c! S·ªë d∆∞: ${toCurrency(profile.balance)}`,
          emoji: false,
        })
      );
    }

    // T√≠nh k·∫øt qu·∫£
    const rps = rpsGame(userMove, profile, bet);
    // T√≠nh ti·ªÅn th·∫Øng
    const winAmount = Math.floor(bet * (1 + Math.random() * 0.5)); // 1x ~ 1.5x
    // T·∫°o string cho k·∫øt qu·∫£
    const resString = {
      0: () => {
        profile.balance -= bet;
        profile.totalSpent -= bet;
        return `B·∫°n thua v√† b·ªã tr·ª´ **${toCurrency(bet)}**!`;
      },
      1: () => {
        return 'H√≤a, b·∫°n kh√¥ng b·ªã tr·ª´ ti·ªÅn!';
      },
      2: () => {
        profile.balance += winAmount;
        profile.totalEarned += winAmount;
        return `B·∫°n th·∫Øng v√† nh·∫≠n ƒë∆∞·ª£c **${toCurrency(winAmount)}**!`;
      },
    };
    // TƒÉng s·ªë l·∫ßn ch∆°i v√† c·∫≠p nh·∫≠t
    profile.rpsCount += 1;
    profile.lastPlayRPS = today;
    await profile.save().catch(console.error);
    // Tr·∫£ v·ªÅ k·∫øt qu·∫£
    const embed = new EmbedBuilder()
      .setAuthor({ name: `Hi, ${user.displayName || user.username}`, iconURL: user.displayAvatarURL(true) })
      .setTitle('You ' + rps.result)
      .setDescription(
        `${rps.description}\n\n${resString[rps.res]()}\nS·ªë l·∫ßn ch∆°i h√¥m nay: **${
          profile.rpsCount
        }/50**\nS·ªë d∆∞: **${toCurrency(profile.balance)}**`
      )
      .setColor(rps.Color)
      .setThumbnail(user.displayAvatarURL(true))
      .setTimestamp()
      .addFields(
        {
          name: '\\üí∞ T·ªïng ti·ªÅn ƒë√£ nh·∫≠n',
          value: toCurrency(profile.totalEarned) || 0,
          inline: true,
        },
        {
          name: '\\üí∏ T·ªïng ti·ªÅn ƒë√£ chi',
          value: toCurrency(profile.totalSpent) || 0,
          inline: true,
        }
      );

    return await interaction.update({ embeds: [embed] });
  },
};
