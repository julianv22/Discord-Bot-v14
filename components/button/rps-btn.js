const economyProfile = require('../../config/economyProfile');
const { Client, Interaction, EmbedBuilder } = require('discord.js');
module.exports = {
  data: { name: 'rps-btn' },
  /**
   * RPS Game
   * @param {Interaction} interaction - Interaction object
   * @param {Client} client - Client object
   */
  async execute(interaction, client) {
    const { errorEmbed } = client;
    const { user, guild } = interaction;
    const [, button, betStr] = interaction.customId.split(':');
    const bet = parseInt(betStr, 10);
    const botMove = Math.floor(Math.random() * 3);
    const userMove = parseInt(button, 10);
    const profile = await economyProfile.findOne({ guildID: guild.id, userID: user.id }).catch(() => {});
    // Ki·ªÉm tra t√†i kho·∫£n Economy
    if (!profile) return interaction.update(errorEmbed(true, 'B·∫°n ch∆∞a c√≥ t√†i kho·∫£n Economy!'));
    // Reset count n·∫øu sang ng√†y m·ªõi
    const today = new Date();
    const lastPlay = profile.lastPlayRPS ? new Date(profile.lastPlayRPS) : null;
    const isNewDay = !lastPlay || today.toDateString() !== lastPlay.toDateString();
    if (isNewDay) {
      profile.rpsCount = 0;
      profile.lastPlayRPS = today;
    }
    // Ki·ªÉm tra s·ªë l·∫ßn ch∆°i trong ng√†y
    if (profile.rpsCount >= 50)
      return interaction.update({
        embeds: [
          {
            color: 16711680,
            description: `\\‚ùå | B·∫°n ƒë√£ ch∆°i h·∫øt 50 l·∫ßn trong ng√†y!`,
          },
        ],
        components: [],
      });
    // Ki·ªÉm tra ti·ªÅn c∆∞·ª£c
    if (profile.balance < bet) {
      return interaction.update(
        errorEmbed(true, `B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ c∆∞·ª£c! S·ªë d∆∞: ${profile.balance.toLocaleString()}\\üí≤`),
      );
    }
    /**
     * RPS Config
     * @property {Object} Emojis - Emojis cho c√°c n∆∞·ªõc ƒëi
     * @property {Object} Results - K·∫øt qu·∫£ RPS d·∫°ng s·ªë
     * @property {Object} Compares - String so s√°nh k·∫øt qu·∫£ RPS
     * @property {Object} ResultStrings - String k·∫øt qu·∫£ RPS
     * @property {Object} Colors - M√†u s·∫Øc cho embed
     * @property {Object} Functions - H√†m x·ª≠ l√Ω k·∫øt qu·∫£ RPS tr·∫£ v·ªÅ string
     */
    const rpsConfig = {
      Emojis: { 0: 'üî®', 1: 'üìÑ', 2: '‚úÇÔ∏è' },
      Results: { Lose: 0, Tie: 1, Win: 2 },
      Compares: { 0: '<', 1: '=', 2: '>' },
      ResultStrings: { 0: `Lose \\üè≥Ô∏è`, 1: `Tie \\ü§ù`, 2: `Win \\üéâ` },
      Colors: { 0: 'Red', 1: 'Orange', 2: 'Green' },
      Functions: {
        0: () => {
          profile.balance -= bet;
          profile.totalSpent -= bet;
          return `B·∫°n thua v√† b·ªã tr·ª´ **${bet.toLocaleString()}\\üí≤**!`;
        },
        1: () => {
          return `H√≤a, b·∫°n kh√¥ng b·ªã tr·ª´ ti·ªÅn!`;
        },
        2: () => {
          profile.balance += winAmount;
          profile.totalEarned += winAmount;
          return `B·∫°n th·∫Øng v√† nh·∫≠n ƒë∆∞·ª£c **${winAmount.toLocaleString()}\\üí≤**!`;
        },
      },
    };
    // Destructure RPS Config
    const {
      Emojis,
      Results: { Tie, Win, Lose },
      Compares,
      ResultStrings,
      Colors,
    } = rpsConfig;
    // S·ªë ti·ªÅn th·∫Øng
    let winAmount = Math.floor(bet * (1 + Math.random() * 0.5)); // 1x ~ 1.5x
    // Ma tr·∫≠n k·∫øt qu·∫£
    const resultMatrix = [
      [Tie, Lose, Win],
      [Win, Tie, Lose],
      [Lose, Win, Tie],
    ];
    /**
     * H√†m t√≠nh k·∫øt qu·∫£ RPS
     * @param {Number} userMove - N∆∞·ªõc ƒëi c·ªßa ng∆∞·ªùi d√πng
     * @param {Number} botMove - N∆∞·ªõc ƒëi c·ªßa bot
     * @returns {Object} - Tr·∫£ v·ªÅ object g·ªìm:
     * - result: K·∫øt qu·∫£ RPS
     * - color: M√†u s·∫Øc cho embed
     * - description: M√¥ t·∫£ cho embed
     * - res: K·∫øt qu·∫£ RPS d·∫°ng s·ªë
     */
    function rpsResult(userMove, botMove) {
      const res = resultMatrix[userMove][botMove];
      return {
        result: ResultStrings[res],
        color: Colors[res],
        description: `„ÄîYou ${Emojis[userMove]}„Äï ${Compares[res]} „ÄîBot ${Emojis[botMove]}„Äï`,
        res,
      };
    }
    try {
      // T√≠nh k·∫øt qu·∫£
      const rps = rpsResult(userMove, botMove);
      // TƒÉng s·ªë l·∫ßn ch∆°i v√† c·∫≠p nh·∫≠t ng√†y
      profile.rpsCount += 1;
      profile.lastPlayRPS = today;
      // T·∫°o embed th√¥ng b√°o k·∫øt qu·∫£
      const embed = new EmbedBuilder()
        .setAuthor({
          name: `Hi, ${user.displayName || user.username}`,
          iconURL: user.displayAvatarURL(true),
        })
        .setColor(rps.color)
        .setThumbnail(user.displayAvatarURL(true))
        .setTimestamp()
        .setTitle('You ' + rps.result)
        .setDescription(
          `${rps.description}\n\n${rpsConfig.Functions[rps.res]()}\nS·ªë l·∫ßn ch∆°i h√¥m nay: **${
            profile.rpsCount
          }/50**\nS·ªë d∆∞: **${profile.balance.toLocaleString()}\\üí≤**`,
        )
        .addFields([
          {
            name: `\\üí∞ T·ªïng ti·ªÅn ƒë√£ nh·∫≠n`,
            value: `${profile.totalEarned?.toLocaleString() || 0}\\üí≤`,
            inline: true,
          },
          {
            name: `\\üí∏ T·ªïng ti·ªÅn ƒë√£ chi`,
            value: `${profile.totalSpent?.toLocaleString() || 0}\\üí≤`,
            inline: true,
          },
        ]);
      // C·∫≠p nh·∫≠t t√†i kho·∫£n
      await profile.save().catch(() => {});
      // Tr·∫£ v·ªÅ k·∫øt qu·∫£
      return interaction.update({ embeds: [embed] });
    } catch (e) {
      console.error('Error while running rpsGame', e);
      return interaction.update(errorEmbed(true, 'ƒê√£ x·∫£y ra l·ªói khi ch∆°i game!'));
    }
  },
};
