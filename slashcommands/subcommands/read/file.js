const { Client, Interaction, SlashCommandSubcommandBuilder, Colors } = require('discord.js');
const { readFileSync } = require('fs');
const path = require('path');

module.exports = {
  category: 'sub command',
  parent: 'read',
  scooldown: 0,
  data: new SlashCommandSubcommandBuilder().setName('file'),

  /** - Reads a file from the project.
   * @param {Interaction} interaction - Interaction
   * @param {Client} client - Discord Client */
  async execute(interaction, client) {
    const { errorEmbed, catchError } = client;
    await interaction.deferReply({ flags: 64 });
    // L·∫•y ƒë∆∞·ªùng d·∫´n file t·ª´ t√πy ch·ªçn c·ªßa l·ªánh
    const relativeFilePath = interaction.options.getString('filepath');
    // T·∫°o ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi cho file.
    const absoluteFilePath = path.join(process.cwd(), relativeFilePath);

    await interaction.editReply(errorEmbed({ desc: `Loading file [ \`${relativeFilePath}\` ]...`, emoji: 'üîÉ' }));
    // Ki·ªÉm tra xem file c√≥ ph·∫£i l√† file .js kh√¥ng
    if (!relativeFilePath.endsWith('.js'))
      return interaction.editReply(errorEmbed({ desc: 'Please only read JavaScript files (.js)!' }));

    try {
      // ƒê·ªçc n·ªôi dung file
      const fileContent = readFileSync(absoluteFilePath, 'utf8');
      const MAX_LENGTH = 1990;

      await interaction.editReply(
        errorEmbed({
          title: '\\‚úÖ Loaded file successfully!',
          desc: `Successfully read content of file [ \`${relativeFilePath}\` ]:`,
          color: Colors.DarkGreen,
        })
      );

      for (let i = 0; i < fileContent.length; i += MAX_LENGTH) {
        await interaction.followUp({
          content: `\`\`\`js\n${fileContent.slice(i, i + MAX_LENGTH)}\n\`\`\``,
          flags: 64,
        });
      }
    } catch (error) {
      // X·ª≠ l√Ω c√°c l·ªói khi ƒë·ªçc file
      if (error.code === 'ENOENT')
        // File ho·∫∑c th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i
        return interaction.editReply(
          errorEmbed({ desc: `File [ \`${relativeFilePath}\` ] not found. Please check the path.` })
        );
      else if (error.code === 'EISDIR')
        // ƒê∆∞·ªùng d·∫´n tr·ªè ƒë·∫øn m·ªôt th∆∞ m·ª•c
        return interaction.editReply(errorEmbed({ desc: `[ \`${relativeFilePath}\` ] is a directory, not a file.` }));
      else if (error.code === 'EACCES' || error.code === 'EPERM')
        // L·ªói quy·ªÅn truy c·∫≠p
        return interaction.editReply(errorEmbed({ desc: `No permission to read file [ \`${relativeFilePath}\` ].` }));
      else return await catchError(interaction, error, this);
    }
  },
};
