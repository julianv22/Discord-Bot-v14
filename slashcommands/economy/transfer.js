const economyProfile = require('../../config/economyProfile');
const {
  SlashCommandBuilder,
  Interaction,
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
} = require('discord.js');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('transfer')
    .setDescription('Transfer üí≤ to other users')
    .addUserOption((opt) => opt.setName('target').setDescription('Target user').setRequired(true))
    .addIntegerOption((opt) => opt.setName('amount').setDescription('Amount of üí≤ to transfer').setRequired(true)),
  category: 'economy',
  scooldown: 0,

  /** @param {Interaction} interaction @param {Client} client */
  async execute(interaction, client) {
    const { errorEmbed } = client;
    const { user, guild, options } = interaction;
    const targetUser = options.getUser('target');
    const amount = options.getInteger('amount');

    if (targetUser.bot) return interaction.reply(errorEmbed(true, `B·∫°n kh√¥ng th·ªÉ chuy·ªÉn \\üí≤ cho bot!`));
    if (targetUser.id === user.id)
      return interaction.reply(errorEmbed(true, `B·∫°n kh√¥ng th·ªÉ chuy·ªÉn \\üí≤ cho ch√≠nh m√¨nh!`));

    let [profile, targetProfile] = await Promise.all([
      economyProfile.findOne({ guildID: guild.id, userID: user.id }).catch(() => {}),
      economyProfile.findOne({ guildID: guild.id, userID: targetUser.id }).catch(() => {}),
    ]);

    if (!profile || !targetProfile)
      return interaction.reply(
        errorEmbed(
          true,
          !profile
            ? `B·∫°n ch∆∞a c√≥ t√†i kho·∫£n Economy, vui l√≤ng s·ª≠ d·ª•ng l·ªánh \`/daily\` ƒë·ªÉ t·∫°o t√†i kho·∫£n`
            : `ƒê·ªëi t∆∞·ª£ng chuy·ªÉn \\üí≤ ch∆∞a c√≥ t√†i kho·∫£n Economy`,
        ),
      );
    if (amount < 99 || amount > profile.bank)
      return interaction.reply(
        errorEmbed(true, amount < 99 ? `S·ªë \\üí≤ ph·∫£i t·ªëi thi·ªÉu l√† 100\\üí≤` : `B·∫°n kh√¥ng c√≥ ƒë·ªß \\üí≤ ƒë·ªÉ chuy·ªÉn!`),
      );
    const fee = Math.round(amount * 0.01);
    const total = amount + fee;
    const embed = new EmbedBuilder()
      .setAuthor({ name: `${guild.name} Economy Transfer`, iconURL: guild.iconURL(true) })
      .setTitle(`Hi·ªán c√≥ ${profile.bank.toLocaleString()}\\üí≤ trong t√†i kho·∫£n \\üè¶ c·ªßa b·∫°n`)
      .setDescription(
        `‚ùóThao t√°c n√†y s·∫Ω th·ª±c hi·ªán v·ªõi t√†i kho·∫£n bank\\üè¶ c·ªßa b·∫°n ch·ª© kh√¥ng ph·∫£i t√†i kho·∫£n trong t√∫i ti·ªÅn\\üí∞.\n\n‚ùó Chuy·ªÉn ${amount.toLocaleString()}\\üí≤ t·ª´ t√†i kho·∫£n c·ªßa b·∫°n sang t√†i kho·∫£n c·ªßa ${targetUser}.\n\n‚ùó H·ªá th·ªëng s·∫Ω t√≠nh ph√≠ 1% v·ªõi s·ªë ti·ªÅn c·∫ßn chuy·ªÉn, b·∫°n s·∫Ω ph·∫£i tr·∫£ s·ªë ti·ªÅn l√† ${total}\\üí≤.\n\n‚ùó B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c?`,
      )
      .setColor('Random')
      .setTimestamp()
      .setThumbnail(cfg.economyPNG)
      .setFooter({ text: `Requested bye ${user.displayName || user.username}`, iconURL: user.displayAvatarURL(true) });

    await interaction.reply({
      embeds: [embed],
      components: [
        new ActionRowBuilder().addComponents([
          new ButtonBuilder()
            .setCustomId(`transferbtn:${amount}:${fee}:${targetUser.id}`)
            .setLabel('Ti·∫øp t·ª•c')
            .setStyle(ButtonStyle.Success),
          new ButtonBuilder()
            .setCustomId('cancel')
            .setLabel('Click v√†o Dismiss ƒë·ªÉ hu·ª∑ b·ªè')
            .setStyle(ButtonStyle.Danger)
            .setDisabled(true),
        ]),
      ],
      ephemeral: true,
    });
  },
};
