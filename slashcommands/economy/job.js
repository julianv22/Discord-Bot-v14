const { Client, Interaction, SlashCommandBuilder, EmbedBuilder, Colors } = require('discord.js');
const economyProfile = require('../../config/economyProfile');
const jobs = require('../../config/economy/economyJobs.json');

module.exports = {
  category: 'economy',
  scooldown: 0,
  data: new SlashCommandBuilder().setName('job').setDescription('Get a random job and earn üí≤.'),
  /** - Get a random job and earn üí≤!
   * @param {Interaction} interaction - Command Interaction
   * @param {Client} client - Discord Client */
  async execute(interaction, client) {
    const { user, guild, guildId } = interaction;
    const { errorEmbed } = client;

    const profile = await economyProfile.findOne({ guildID: guildId, userID: user.id }).catch(console.error);
    if (!profile)
      return await interaction.reply(
        errorEmbed({ desc: 'B·∫°n ch∆∞a c√≥ t√†i kho·∫£n Economy!\n ‚û° S·ª≠ d·ª•ng `/daily` ƒë·ªÉ kh·ªüi nghi·ªáp üòÅ' })
      );

    // Cooldown c·ªë ƒë·ªãnh 6 ti·∫øng
    const now = new Date();
    const cooldownMs = 6 * 60 * 60 * 1000;

    if (profile.lastJob && now - new Date(profile.lastJob) < cooldownMs) {
      const finishTime = new Date(new Date(profile.lastJob).getTime() + cooldownMs);
      const timeleft = Math.floor(finishTime.getTime() / 1000);

      return await interaction.reply(
        errorEmbed({
          desc: `B·∫°n ƒëang l√†m vi·ªác ho·∫∑c trong th·ªùi gian ch·ªù (6h)!\n ‚Ü™ H√£y quay l·∫°i sau: <t:${timeleft}:R>`,
          emoji: false,
        })
      );
    }

    // Random job v√† th·ªùi gian l√†m vi·ªác
    const jobKeys = Object.keys(jobs);
    const jobName = jobs[jobKeys[Math.floor(Math.random() * jobKeys.length)]];
    const minMinutes = 180;
    const maxMinutes = 360;
    const workMinutes = Math.floor(Math.random() * (maxMinutes - minMinutes + 1)) + minMinutes;

    profile.lastJob = now;
    profile.lastRob = now;
    profile.lastWork = jobName;

    await profile.save().catch(console.error);

    // Hi·ªÉn th·ªã th·ªùi gian l√†m vi·ªác
    const workTimeStr =
      workMinutes >= 60
        ? `**${Math.floor(workMinutes / 60)} gi·ªù${workMinutes % 60 ? `, ${workMinutes % 60} ph√∫t` : ''}**`
        : `**${workMinutes} ph√∫t**`;

    setTimeout(async () => {
      let reward = workMinutes;
      let lucky = Math.random() < 0.25;
      if (lucky) reward *= 2;
      await user
        .send(
          `üéâ B·∫°n ƒë√£ ho√†n th√†nh c√¥ng vi·ªác **${jobName}** t·∫°i guild **${
            guild.name
          }**\n\nüí∞ B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c **${reward.toCurrency()}**${
            lucky ? '\n\n‚ú® May m·∫Øn! Ch·ªß thu√™ h√†i l√≤ng v·ªõi b·∫°n, b·∫°n nh·∫≠n ƒë∆∞·ª£c g·∫•p ƒë√¥i ti·ªÅn c√¥ng!' : ''
          }`
        )
        .catch(console.error);

      let p = await economyProfile.findOne({ guildID: guildId, userID: user.id }).catch(console.error);
      if (p) {
        p.balance += reward;
        p.totalEarned += reward;
        p.lastRob = null;
        await p.save().catch(console.error);
      }
    }, workMinutes * 60 * 1000);

    const embeds = [
      new EmbedBuilder()
        .setAuthor({ name: guild.name, iconURL: guild.iconURL(true) })
        .setTitle('B·∫°n ƒë√£ nh·∫≠n m·ªôt c√¥ng vi·ªác m·ªõi!')
        .setDescription(
          `\\üë∑‚Äç‚ôÄÔ∏è C√¥ng vi·ªác: **${jobName}**\n\n\\‚è≥ Th·ªùi gian l√†m vi·ªác: ${workTimeStr}\n\n\\üí° Sau khi ho√†n th√†nh, b·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c **${workMinutes.toCurrency()}**\n\nB·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o khi ho√†n th√†nh c√¥ng vi·ªác.`
        )
        .setColor(Colors.DarkGreen)
        .setThumbnail(cfg.economyPNG)
        .setTimestamp()
        .setFooter({ text: `Requested by ${user.displayName || user.username}`, iconURL: user.displayAvatarURL() }),
    ];

    return await interaction.reply({ embeds });
  },
};
